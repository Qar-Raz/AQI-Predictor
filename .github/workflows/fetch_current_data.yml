# A descriptive name for your workflow
name: Fetch Daily AQI Data

# This section defines WHEN the workflow will run
on:
  # This allows you to run the workflow manually from the Actions tab on GitHub
  workflow_dispatch:
  
  # This is the schedule trigger
  schedule:
    # This is a CRON schedule. It runs at 10 minutes past the hour of hours 5, 11, 17, and 23 UTC.
    - cron: '10 5,11,17,23 * * *'

# This section defines WHAT the workflow will do
jobs:
  build-and-commit:
    # The workflow will run on a fresh virtual machine running Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Install the necessary Python libraries from your requirements file
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run the data processing pipeline in order
      - name: Run data processing pipeline
        run: |
          # The first script fetches the latest hourly data for the past week
          echo "--- Running: fetch_current_data.py ---"
          python fetch_current_data.py
          
          # The second script aggregates that hourly data into daily summaries
          echo "--- Running: hourly_to_daily.py ---"
          python hourly_to_daily.py
          
          # The third script merges the new daily data into the main historical pool
          echo "--- Running: append_and_clean_historical_data.py ---"
          python append_and_clean_historical_data.py

      # Step 5: Commit ALL the newly updated CSV files back to your repository
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions-bot@github.com"
          
          # Add all the files that are generated and updated by the pipeline.
          # Using the correct filenames you provided for the output.
          git add data/last_7_days_hourly_data.csv
          git add data/last_7_days_daily_data.csv
          git add data/karachi_daily_data_5_years.csv
          
          # The commit will only happen if any of the files have actually changed
          git commit -m "Automated data update and aggregation" || echo "No changes to commit"
          git push